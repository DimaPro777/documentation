import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime, timedelta

API_TOKEN = '8186957673:AAGj0SFhIkY8QV-nDWQu-802KkdtO6YX36I'
ADMIN_ID = 747627241  # Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

users = {}
ad_delay = timedelta(minutes=1)

def get_user(uid):
    if uid not in users:
        users[uid] = {
            "balance": 0,
            "referrals": [],
            "joined": datetime.now(),
            "last_ad_time": datetime.min,
            "ref_by": None,
            "ads_today": 0,
            "last_ad_reset": datetime.now().date()
        }
    return users[uid]

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    uid = message.from_user.id
    user = get_user(uid)
    args = message.get_args()
    if args.isdigit():
        ref_id = int(args)
        if ref_id != uid and user["ref_by"] is None:
            user["ref_by"] = ref_id
            ref_user = get_user(ref_id)
            ref_user["referrals"].append(uid)
            ref_user["balance"] += 1

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üé• –°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data="watch_ad"),
        InlineKeyboardButton("üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals"),
        InlineKeyboardButton("üì§ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data="withdraw"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    )

    if uid == ADMIN_ID:
        keyboard.add(InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))

    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'watch_ad')
async def watch_ad(callback: types.CallbackQuery):
    uid = callback.from_user.id
    user = get_user(uid)
    now = datetime.now()
    if user["last_ad_reset"] != now.date():
        user["ads_today"] = 0
        user["last_ad_reset"] = now.date()
    if now - user["last_ad_time"] < ad_delay:
        remaining = ad_delay - (now - user["last_ad_time"])
        await callback.answer(f"‚è± –ü–æ–¥–æ–∂–¥–∏ {int(remaining.total_seconds())} —Å–µ–∫.", show_alert=True)
        return
    user["last_ad_time"] = now
    user["balance"] += 1
    user["ads_today"] += 1
    ad_url = "https://tpi.li/Oarv0hIGUc"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∫–ª–∞–º–µ", url=ad_url))
    await callback.message.answer("üé• –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É:", reply_markup=keyboard)
    await asyncio.sleep(5)
    await callback.message.answer("‚úÖ –†–µ–∫–ª–∞–º–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞! +1‚Ç∏")

@dp.callback_query_handler(lambda c: c.data == 'referrals')
async def referrals(callback: types.CallbackQuery):
    uid = callback.from_user.id
    user = get_user(uid)
    ref_link = f"https://t.me/stalarmoneybot?start={uid}"
    await callback.message.answer(
        f"üë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {len(user['referrals'])}
"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:
{ref_link}"
    )

@dp.callback_query_handler(lambda c: c.data == 'withdraw')
async def withdraw(callback: types.CallbackQuery):
    uid = callback.from_user.id
    user = get_user(uid)
    if user["balance"] < 5:
        await callback.message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 5‚Ç∏")
    else:
        await callback.message.answer("üì§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä Kaspi (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

@dp.callback_query_handler(lambda c: c.data == 'stats')
async def stats(callback: types.CallbackQuery):
    total_users = len(users)
    total_balance = sum(u["balance"] for u in users.values())
    total_referrals = sum(len(u["referrals"]) for u in users.values())
    await callback.message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance}‚Ç∏
"
        f"üßæ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}"
    )

@dp.callback_query_handler(lambda c: c.data == 'profile')
async def profile(callback: types.CallbackQuery):
    uid = callback.from_user.id
    user = get_user(uid)
    ref_by = user["ref_by"]
    ref_text = f"@{(await bot.get_chat(ref_by)).username}" if ref_by else "–Ω–∏–∫—Ç–æ"
    if user["last_ad_reset"] != datetime.now().date():
        user["ads_today"] = 0
        user["last_ad_reset"] = datetime.now().date()
    await callback.message.answer(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

"
        f"üÜî ID: {uid}
"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']}‚Ç∏
"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(user['referrals'])}
"
        f"üé• –†–µ–∫–ª–∞–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {user['ads_today']}
"
        f"üë§ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {ref_text}"
    )

@dp.callback_query_handler(lambda c: c.data == 'admin_panel')
async def admin_panel(callback: types.CallbackQuery):
    uid = callback.from_user.id
    if uid != ADMIN_ID:
        return
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    )
    await callback.message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'admin_stats')
async def admin_stats(callback: types.CallbackQuery):
    total_users = len(users)
    total_balance = sum(u["balance"] for u in users.values())
    total_referrals = sum(len(u["referrals"]) for u in users.values())
    await callback.message.answer(
        f"üìä –ê–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance}‚Ç∏
"
        f"üßæ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}"
    )

@dp.callback_query_handler(lambda c: c.data == 'admin_users')
async def admin_users(callback: types.CallbackQuery):
    user_list = "
".join([f"ID: {uid}, –ë–∞–ª–∞–Ω—Å: {u['balance']}‚Ç∏" for uid, u in list(users.items())[:10]])
    await callback.message.answer(f"üë• –ü–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
{user_list}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
